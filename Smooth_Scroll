import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart';
import './constants.dart';

class _WebSmoothScrollState extends State<WebSmoothScroll> {
  double _scroll = 0;
  double _oldScrollState = 0;

  @override
  void initState() {
    super.initState();
    widget.controller.addListener(scrollListener);
  }

  @override
  void didUpdateWidget(covariant WebSmoothScroll oldWidget) {
    widget.controller.removeListener(scrollListener);
    widget.controller.addListener(scrollListener);
    super.didUpdateWidget(oldWidget);
  }

  @override
  Widget build(BuildContext context) {
    return Listener(
      onPointerSignal: onPointerSignal,
      onPointerMove: onPointerMove, // Add this line for touch gestures
      child: widget.child,
    );
  }

  void scrollListener() {
    _oldScrollState = _scroll;
    _scroll = widget.controller.offset;
  }

  void onPointerSignal(PointerSignalEvent event) {
    int millis = widget.animationDuration;

    if (event is PointerScrollEvent) {
      handleScrollEvent(event.scrollDelta.dy, millis);
    }
  }

  // Handle touch gestures
  void onPointerMove(PointerMoveEvent event) {
    // You can adjust the sensitivity and offset as needed
    double sensitivity = 0.5;
    double offset = event.primaryDelta! * sensitivity;
    int millis = widget.animationDuration;

    handleScrollEvent(offset, millis);
  }

  void handleScrollEvent(double delta, int millis) {
    if (delta > 0) {
      _scroll += (delta + widget.scrollOffset);
    } else {
      _scroll += (delta - widget.scrollOffset);
    }

    if (_scroll > widget.controller.position.maxScrollExtent) {
      _scroll = widget.controller.position.maxScrollExtent;
      millis = widget.animationDuration ~/ 4;
    }

    if (_scroll < 0) {
      _scroll = 0;
      millis = widget.animationDuration ~/ 4;
    }

    final double scrollDelta = _scroll - _oldScrollState;

    if (scrollDelta < 150 && scrollDelta > -150) {
      widget.controller.animateTo(
        _scroll,
        duration: const Duration(milliseconds: 400),
        curve: widget.curve,
      );
    } else {
      widget.controller.animateTo(
        _scroll,
        duration: Duration(milliseconds: millis),
        curve: widget.curve,
      );
    }
  }
}
